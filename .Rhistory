"#SBATCH --mem=750Mb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
partition,
"#SBATCH --time=0:30:00",
"#SBATCH --cpus-per-task=2",
"#SBATCH --output=../samtools_filter_Out/clustOut/samtoolsFilter.%j.out",
"#SBATCH --error=../samtools_filter_Out/clustOut/samtoolsFilter.%j.err",
"source activate lotterhos_utils_sara",
paste0("samtools view -@2 -h -q 10 -F 0x100 -F 0x400 ../picard_Out/", sampleNames$ID[i],
"aln.sorted.md.bam | mawk '$6 !~ /[1-9][0-9].[SH]/'| samtools view -@2 -b > ../samtools_filter_Out/",
sampleNames$ID[i], ".f.bam", sep = ""),
"wait",
paste0("picard AddOrReplaceReadGroups I=../samtools_filter_Out/", sampleNames$ID[i],
".f.bam O=../labeled_bam_Out/", sampleNames$ID[i], ".f.rg.bam RGID=",
sampleNames$ID[i], " RGSM=",  sampleNames$ID[i],
" RGPL=Illumina RGLB=lib1 TGPU=unit1")
), fileConn)
for(i in 1:nrow(sampleNames)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/samtoolsFilter/submissionFiles/", sampleNames$ID[i], "_submitFilter.sh", sep="")))
partition <- if(i < 300){
"#SBATCH --partition=lotterhos"
} else if(i >= 46 & i < 150){
"#SBATCH --partition=short"
} else {
"#SBATCH --partition=express"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=picardMarkDup",
"#SBATCH --mem=750Mb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
partition,
"#SBATCH --time=0:30:00",
"#SBATCH --cpus-per-task=2",
"#SBATCH --output=../samtools_filter_Out/clustOut/samtoolsFilter.%j.out",
"#SBATCH --error=../samtools_filter_Out/clustOut/samtoolsFilter.%j.err",
"source activate lotterhos_utils_sara",
paste0("samtools view -@2 -h -q 10 -F 0x100 -F 0x400 ../picard_Out/", sampleNames$ID[i],
"aln.sorted.md.bam | mawk '$6 !~ /[1-9][0-9].[SH]/'| samtools view -@2 -b > ../samtools_filter_Out/",
sampleNames$ID[i], ".f.bam", sep = ""),
"wait",
paste0("picard AddOrReplaceReadGroups I=../samtools_filter_Out/", sampleNames$ID[i],
".f.bam O=../labeled_bam_Out/", sampleNames$ID[i], ".f.rg.bam RGID=",
sampleNames$ID[i], " RGSM=",  sampleNames$ID[i],
" RGPL=Illumina RGLB=lib1 TGPU=unit1")
), fileConn)
}
for(i in 1:nrow(sampleNames)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/samtoolsFilter/submissionFiles/", sampleNames$ID[i], "_submitFilter.sh", sep="")))
partition <- if(i < 300){
"#SBATCH --partition=lotterhos"
} else if(i >= 46 & i < 150){
"#SBATCH --partition=short"
} else {
"#SBATCH --partition=express"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=picardMarkDup",
"#SBATCH --mem=750Mb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
partition,
"#SBATCH --time=0:30:00",
"#SBATCH --cpus-per-task=2",
"#SBATCH --output=../samtools_filter_Out/clustOut/samtoolsFilter.%j.out",
"#SBATCH --error=../samtools_filter_Out/clustOut/samtoolsFilter.%j.err",
"source activate lotterhos_utils_sara",
paste0("samtools view -@2 -h -q 10 -F 0x100 -F 0x400 ../picard_Out/", sampleNames$ID[i],
"aln.sorted.md.bam | mawk '$6 !~ /[1-9][0-9].[SH]/'| samtools view -@2 -b > ../samtools_filter_Out/",
sampleNames$ID[i], ".f.bam", sep = ""),
"wait",
paste0("picard AddOrReplaceReadGroups I=../samtools_filter_Out/", sampleNames$ID[i],
".f.bam O=../labeled_bam_Out/", sampleNames$ID[i], ".f.rg.bam RGID=",
sampleNames$ID[i], " RGSM=",  sampleNames$ID[i],
" RGPL=Illumina RGLB=lib1 RGPU=unit1")
), fileConn)
}
for(i in 1:nrow(sampleNames)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/samtoolsFilter/submissionFiles/", sampleNames$ID[i], "_submitFilter.sh", sep="")))
partition <- if(i < 150){
"#SBATCH --partition=lotterhos"
} else if(i >= 150 & i < 300){
"#SBATCH --partition=short"
} else {
"#SBATCH --partition=express"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=picardMarkDup",
"#SBATCH --mem=750Mb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
partition,
"#SBATCH --time=0:30:00",
"#SBATCH --cpus-per-task=2",
"#SBATCH --output=../samtools_filter_Out/clustOut/samtoolsFilter.%j.out",
"#SBATCH --error=../samtools_filter_Out/clustOut/samtoolsFilter.%j.err",
"source activate lotterhos_utils_sara",
paste0("samtools view -@2 -h -q 10 -F 0x100 -F 0x400 ../picard_Out/", sampleNames$ID[i],
"aln.sorted.md.bam | mawk '$6 !~ /[1-9][0-9].[SH]/'| samtools view -@2 -b > ../samtools_filter_Out/",
sampleNames$ID[i], ".f.bam", sep = ""),
"wait",
paste0("picard AddOrReplaceReadGroups I=../samtools_filter_Out/", sampleNames$ID[i],
".f.bam O=../labeled_bam_Out/", sampleNames$ID[i], ".f.rg.bam RGID=",
sampleNames$ID[i], " RGSM=",  sampleNames$ID[i],
" RGPL=Illumina RGLB=lib1 RGPU=unit1")
), fileConn)
}
for(i in 1:nrow(sampleNames)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/samtoolsFilter/submissionFiles/", sampleNames$ID[i], "_submitFilter.sh", sep="")))
partition <- if(i < 150){
"#SBATCH --partition=lotterhos"
} else if(i >= 150 & i < 300){
"#SBATCH --partition=short"
} else {
"#SBATCH --partition=express"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=samtoolsFilter",
"#SBATCH --mem=750Mb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
partition,
"#SBATCH --time=0:30:00",
"#SBATCH --cpus-per-task=2",
"#SBATCH --output=../samtools_filter_Out/clustOut/samtoolsFilter.%j.out",
"#SBATCH --error=../samtools_filter_Out/clustOut/samtoolsFilter.%j.err",
"source activate lotterhos_utils_sara",
paste0("samtools view -@2 -h -q 10 -F 0x100 -F 0x400 ../picard_Out/", sampleNames$ID[i],
"aln.sorted.md.bam | mawk '$6 !~ /[1-9][0-9].[SH]/'| samtools view -@2 -b > ../samtools_filter_Out/",
sampleNames$ID[i], ".f.bam", sep = ""),
"wait",
paste0("picard AddOrReplaceReadGroups I=../samtools_filter_Out/", sampleNames$ID[i],
".f.bam O=../labeled_bam_Out/", sampleNames$ID[i], ".f.rg.bam RGID=",
sampleNames$ID[i], " RGSM=",  sampleNames$ID[i],
" RGPL=Illumina RGLB=lib1 RGPU=unit1")
), fileConn)
}
sampleNames <- read.csv("src/SampleNames.txt", header = FALSE)
colnames(sampleNames) <- "ID"
fileConn <- file(print("src/samtoolsFilter/submissionFiles/mergeBams.sh"))
## split linkage group 2 up
chr2.final.loc <- 28732775
chr2.by10k <- seq(from = 0, to = 28732775, by = 10000)
chr2.by10kb.start <- c(chr2.by10k, chr2.final.loc)
chr2.by10kb.end <- chr2.by10kb+9999
chr2.by10kb <- seq(from = 0, to = 28732775, by = 10000)
chr2.by10kb.start <- c(chr2.by10k, chr2.final.loc)
## split linkage group 2 up
chr2.final.loc <- 28732775
chr2.by10kb <- seq(from = 0, to = 28732775, by = 10000)
chr2.by10kb.start <- c(chr2.by10kb, chr2.final.loc)
chr2.by10kb.end <- chr2.by10kb+9999
section.names <- paste0("NC_044049.1.sec", seq(from = 1, to = length(chr2.by10kb),
by = 1))
chr2.by10kb
chr2.by10kb.start
chr2.by10kb.end <- chr2.by10kb+9999
section.names <- paste0("NC_044049.1.sec", seq(from = 1, to = length(chr2.by10kb),
by = 1))
section.names
## split linkage group 2 up
#NC_044051.1:1-100000
#NC_044051.1:100001-200000
#43798135
chr.final.loc <- 43798135
chr.by100kb <- seq(from = 0, to = chr.final.loc, by = 100000)
chr.by100kb.start <- c(chr.by100kb, chr.final.loc)
chr.by100kb.end
chr.by100kb.end <- chr.by100kb+9999
chr.by100kb.end
section.names <- paste0("NC_044049.1.sec", seq(from = 1, to = length(chr.by100kb),
by = 1))
length(chr.by100kb.start)
length(chr.by100kb.end)
chr.by100kb <- seq(from = 0, to = chr.final.loc, by = 100000)
chr.by100kb.ends <- c(chr.by100kb+9999, chr.final.loc)
length(chr.by100kb)
length(chr.by100kb.ends)
head(chr.by100kb)
## split linkage group 2 up
#NC_044051.1:1-100000
#NC_044051.1:100001-200000
#43798135
options(scipen = 999)
chr.final.loc <- 43798135
chr.by100kb <- seq(from = 0, to = chr.final.loc, by = 100000)
chr.by100kb.ends <- c(chr.by100kb+9999, chr.final.loc)
head(chr.by100kb)
head(chr.by100kb.ends)
chr.by100kb <- seq(from = 1, to = chr.final.loc, by = 100000)
chr.by100kb.ends <- c(chr.by100kb+9999, chr.final.loc)
head(chr.by100kb)
chr.by100kb.ends <- c(chr.by100kb+9999, chr.final.loc)
head(chr.by100kb.ends)
chr.by100kb <- seq(from = 1, to = chr.final.loc, by = 100000)
chr.by100kb.ends <- c(chr.by100kb+99999, chr.final.loc)
head(chr.by100kb)
head(chr.by100kb.ends)
tail(chr.by100kb)
tail(chr.by100kb.ends)
n <- 100000
(chr.final.loc)/n
extra <- df.chrom - floor(chr.final.loc)/n)
floor(chr.final.loc)/n)
extra <-  floor(chr.final.loc/n)
floor(chr.final.loc/n)
floor(chr.final.loc/n) + n
floor(chr.final.loc/n)* n
43798135 - floor(chr.final.loc/n)* n
final.sect <-  floor(chr.final.loc/n) * n
chr.by100kb <- seq(from = 1, to = final.sect, by = n)
tail(chr.by100kb)
final.sect
chr.by100kb <- seq(from = 1, to = final.sect+1, by = n)
chr.by100kb
chr.by100kb+(n-1)
chr.by100kb.ends <- c(chr.by100kb+(n-1), chr.final.loc)
length(chr.by100kb)
length(chr.by100kb.ends)
chr.by100kb.ends <- c(chr.by100kb+(n-1)[1:length(chr.by100kb -1)], chr.final.loc)
length(chr.by100kb.ends)
chr.by100kb+(n-1)[1:length(chr.by100kb -1)]
chr.by100kb+(n-1)
length(chr.by100kb -1)
(chr.by100kb+(n-1))[1:length(chr.by100kb -1)]
chr.by100kb+(n-1)
chr.by100kb[1:length(chr.by100kb)]
chr.by100kb.ends <- c(chr.by100kb[1:length(chr.by100kb)]+(n-1), chr.final.loc)
length(chr.by100kb.ends)
length(chr.by100kb)
(chr.by100kb[1:length(chr.by100kb)])+(n-1)
chr.by100kb[1:length(chr.by100kb)]
chr.by100kb
1:length(chr.by100kb)
length(chr.by100kb)
(chr.by100kb[1:(length(chr.by100kb)-1)])+(n-1)
chr.by100kb[1:(length(chr.by100kb)-1)]
chr.by100kb.ends <- c((chr.by100kb[1:(length(chr.by100kb)-1)])+(n-1), chr.final.loc)
length(chr.by100kb.ends)
length(chr.by100kb)
paste0("NC_044051.1:", chr.by100kb, "-", chr.by100kb.ends)
section.names <- paste0("NC_044051.1:", chr.by100kb, "-", chr.by100kb.ends)
df.chr2.10kb <- as.matrix(section.names)
df.chr.100kb <- as.matrix(section.names)
df.chr.100kb
str(df.chr.100kb)
write.table(df.chr.100kb, "src/alignment/NC_044051.1_100kbRegions.txt", row.names = FALSE,
sep = "\t", col.names = FALSE, quote = FALSE)
cod.gff <- read.table("src/alignment/GCF_902167405.1_gadMor3.0_genomic.gff", sep = "\t", quote = "")
scaffolds.gff <- cod.gff[cod.gff$V3 == "region",]
getwd()
## split linkage group 2 up
#NC_044051.1:1-100000
#NC_044051.1:100001-200000
#43798135
scaffolds <- read.table("GCF_902167405.1_gadMor3.0_assembly_report.txt")
## split linkage group 2 up
#NC_044051.1:1-100000
#NC_044051.1:100001-200000
#43798135
scaffolds <- read.table("src/alignment/GCF_902167405.1_gadMor3.0_assembly_report.txt")
## split linkage group 2 up
#NC_044051.1:1-100000
#NC_044051.1:100001-200000
#43798135
scaffolds <- read.table("src/alignment/GCF_902167405.1_gadMor3.0_assembly_report.txt", fill =TRUE)
head(scaffolds)
chroms <- scaffolds[c(3,7,10)]
colnames(chroms) <- c("chromNum", "chromName", "chromLength")
i <- 1
chr.final.loc <- chroms$chromLength[i]
n <- 100000
final.sect <-  floor(chr.final.loc/n) * n
chr.final.loc <- as.numeric(chroms$chromLength[i])
n <- 100000
final.sect <-  floor(chr.final.loc/n) * n
final.sect
chr.by100kb <- seq(from = 1, to = final.sect+1, by = n)
chr.by100kb.ends <- c((chr.by100kb[1:(length(chr.by100kb)-1)])+(n-1), chr.final.loc)
section.names <- paste0(chroms$chromName[i], chr.by100kb, "-", chr.by100kb.ends)
options(scipen = 999)
chr.final.loc <- as.numeric(chroms$chromLength[i])
n <- 100000
final.sect <-  floor(chr.final.loc/n) * n
chr.by100kb <- seq(from = 1, to = final.sect+1, by = n)
chr.by100kb.ends <- c((chr.by100kb[1:(length(chr.by100kb)-1)])+(n-1), chr.final.loc)
section.names <- paste0(chroms$chromName[i], chr.by100kb, "-", chr.by100kb.ends)
section.names <- paste0(chroms$chromName[i], ":", chr.by100kb, "-", chr.by100kb.ends)
section.names
write.table(df.chr.100kb, paste0("src/alignment/", chroms$chromName[i], "_100kbRegions.txt"), row.names = FALSE,
sep = "\t", col.names = FALSE, quote = FALSE)
df.chr.100kb <- as.matrix(section.names)
write.table(df.chr.100kb, paste0("src/alignment/", chroms$chromName[i], "_100kbRegions.txt"), row.names = FALSE,
sep = "\t", col.names = FALSE, quote = FALSE)
chroms <- scaffolds[1:23,c(3,7,10)]
chroms
colnames(chroms) <- c("chromNum", "chromName", "chromLength")
options(scipen = 999)
for(i in 1:nrow(chroms)){
chr.final.loc <- as.numeric(chroms$chromLength[i])
n <- 100000
final.sect <-  floor(chr.final.loc/n) * n
chr.by100kb <- seq(from = 1, to = final.sect+1, by = n)
chr.by100kb.ends <- c((chr.by100kb[1:(length(chr.by100kb)-1)])+(n-1), chr.final.loc)
section.names <- paste0(chroms$chromName[i], ":", chr.by100kb, "-", chr.by100kb.ends)
df.chr.100kb <- as.matrix(section.names)
write.table(df.chr.100kb, paste0("src/alignment/", chroms$chromName[i], "_100kbRegions.txt"), row.names = FALSE,
sep = "\t", col.names = FALSE, quote = FALSE)
}
scaffolds <- read.table("src/alignment/GCF_902167405.1_gadMor3.0_assembly_report.txt", fill =TRUE)
chroms <- scaffolds[1:23,c(3,7,10)]
colnames(chroms) <- c("chromNum", "chromName", "chromLength")
chroms
paste0("#SBATCH --error=../samtools_filter_Out/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err")
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=freebayes",
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam
--populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf"),
), fileConn)
}
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=freebayes",
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf"),
), fileConn)
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=freebayes",
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf"),
)
)
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
"#SBATCH --job-name=freebayes",
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf")
), fileConn)
}
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
paste0("#SBATCH --job-name=chr", chroms$chromNum[i],"freebayes" ),
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf")
), fileConn)
}
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
paste0("#SBATCH --job-name=chr", chroms$chromNum[i],"freebayes" ),
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../10_freebayes/clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel regionsFiles/", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf")
), fileConn)
}
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
paste0("#SBATCH --job-name=chr", chroms$chromNum[i],"freebayes" ),
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=../clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=../clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel ../regionsFiles/", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> ../outFiles/VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf")
), fileConn)
}
for(i in 1:nrow(chroms)){
#filename <- as.character(sampleNames$ID[i])
fileConn <- file(print(paste("src/freebayes/submissionFiles/", chroms$chromName[i], "_submitFreebayes100kb.sh", sep="")))
constraint <- if(i < 13){
"#SBATCH --constraint=zen2"
} else {
"#SBATCH --constraint=cascadelake"
}
writeLines(c("#!/bin/bash",
paste0("#SBATCH --job-name=chr", chroms$chromNum[i],"freebayes" ),
"#SBATCH --partition=short",
"#SBATCH --mem=150Gb",
"#SBATCH --mail-user=schaal.s@northeastern.edu",
"#SBATCH --mail-type=FAIL",
"#SBATCH --time=24:00:00",
"#SBATCH --cpus-per-task=64",
constraint,
paste0("#SBATCH --output=clustOut/", chroms$chromName[i] ,"_Freebayes.%j.out"),
paste0("#SBATCH --error=clustOut/", chroms$chromName[i] ,"_Freebayes.%j.err"),
"POPFILE=/scratch/schaal.s/CodGenomes/10_freebayes/poplist.txt",
"REF=/scratch/schaal.s/CodGenomes/Cod_genome_data/GCF_902167405.1_gadMor3.0_genomic.fna",
"source ~/miniconda3/bin/activate /work/rc/s.sekar/miniconda/envs/lotterhos_variantCallers",
paste0("freebayes-parallel regionsFiles/", chroms$chromName[i], "_100kbRegions.txt 128 -f ${REF} -b ../labeled_bam_Out/mergedBam_n128_all_lot.bam --populations ${POPFILE} -m 5 -q 5 -E 3 --min-repeat-entropy 1 -n 10 -F 0.1 >> outFiles/VarCall_freebayes-par.chrom_", chroms$chromName[i], ".vcf")
), fileConn)
}
